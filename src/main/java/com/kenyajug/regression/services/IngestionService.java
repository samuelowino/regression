package com.kenyajug.regression.services;
/*
 * MIT License
 *
 * Copyright (c) 2025 Kenya JUG
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import com.kenyajug.regression.entities.AppLog;
import com.kenyajug.regression.entities.LogsDataSource;
import com.kenyajug.regression.entities.LogsMetadata;
import com.kenyajug.regression.models.InstantTraceGroup;
import com.kenyajug.regression.repository.AppLogRepository;
import com.kenyajug.regression.repository.LogsDataSourceRepository;
import com.kenyajug.regression.repository.LogsMetadataRepository;
import com.kenyajug.regression.utils.Constants;
import com.kenyajug.regression.utils.DateTimeUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.regex.Pattern;
@Slf4j
@Service
public class IngestionService implements IIngestionService{
    private final LogsDataSourceRepository dataSourceRepository;
    private final AppLogRepository appLogRepository;
    private final LogsMetadataRepository metadataRepository;
    public IngestionService(LogsDataSourceRepository dataSourceRepository, AppLogRepository appLogRepository, LogsMetadataRepository metadataRepository) {
        this.dataSourceRepository = dataSourceRepository;
        this.appLogRepository = appLogRepository;
        this.metadataRepository = metadataRepository;
    }
    /**
     * Initiates the collection of local logs from the current application environment.
     * <p>
     * This method is typically used to trigger a log harvesting process from locally available
     * log files (e.g., those generated by a running Spring Boot/Tomcat application).
     * </p>
     *
     * @return {@code true} if log collection was successfully initiated or completed;
     * {@code false} if the operation failed or no logs were found.
     */
    @Override
    public boolean processLocalLogs() throws IOException {
        var localLogs = "local";
        var newLogsRecorded = false;
        List<LogsDataSource> logsDataSources = dataSourceRepository.findBySourceType(localLogs);
        if (logsDataSources.isEmpty()) return false;
        for (LogsDataSource logsDataSource : logsDataSources) {
            try {
                var rawLogs = collectRawLogs(logsDataSource);
                var traceGroups = composeRawLogsTraceGroup(rawLogs);
                var logsAndMetadata = composeLogsAndMetadata(logsDataSource,traceGroups);
                var appLogs = logsAndMetadata.keySet();
                if (appLogs.isEmpty()) continue;
                for (AppLog appLog : appLogs) {
                    var alreadyExists = appLogRepository.existsByTimestampApplicationAndSource(
                            appLog.timestamp(),
                            appLog.applicationId(),
                            appLog.logSource()
                    );
                    if (alreadyExists) continue;
                    saveNewLogs(appLog, logsAndMetadata);
                    newLogsRecorded = true;
                }
            } catch (IOException ex){
                log.error("Encountered IO exception while reading raw logs from file {}: {}",
                        logsDataSource.logFilePath(),
                        ex.getLocalizedMessage());
                ex.printStackTrace();
                throw new IOException("Encountered IO exception while reading raw logs from file");
            }
        }
        return newLogsRecorded;
    }
    /**
     * Persists a new {@link AppLog} entry along with its associated metadata records.
     * <p>
     * This method assumes the provided {@code appLog} does not already exist in the database.
     * It saves the {@code appLog} to the {@code appLogRepository}, and then retrieves the corresponding
     * list of {@link LogsMetadata} entries from the {@code logsAndMetadata} map to save them via the
     * {@code metadataRepository}.
     * </p>
     *
     * @param appLog           The {@link AppLog} object to be saved.
     * @param logsAndMetadata  A mapping between {@link AppLog} instances and their corresponding
     *                         lists of {@link LogsMetadata}. The metadata list for the given
     *                         {@code appLog} will be persisted.
     *
     * @throws NullPointerException if {@code logsAndMetadata.get(appLog)} is {@code null}.
     */
    public void saveNewLogs(AppLog appLog, Map<AppLog, List<LogsMetadata>> logsAndMetadata) {
        appLogRepository.save(appLog);
        var metadataList = logsAndMetadata.get(appLog);
        for (LogsMetadata logsMetadata : metadataList) {
            metadataRepository.save(logsMetadata);
        }
    }
    /**
     * Collects raw log data from the specified {@link LogsDataSource}.
     *
     * @param dataSource the data source from which to collect raw logs.
     *                   This could be a local file, API endpoint, or form submission.
     * @throws IOException if IO exception occurs during raw log extraction fails due to IO problems
     * @return a raw string representation of the collected log data.
     */
    @Override
    public String collectRawLogs(LogsDataSource dataSource) throws IOException {
        var path = Path.of(dataSource.logFilePath());
        return Files.readString(path);
    }
    /**
     * Processes structured trace groups extracted from raw logs and composes application log entries
     * along with their associated metadata.
     *
     * @param dataSource the source of the raw log data, used to determine the parsing or structuring strategy.
     * @param instantTraceGroups a list of {@link InstantTraceGroup} objects, each representing a chunk of related log lines
     *                            grouped by timestamp and execution context.
     * @return a map where each {@link AppLog} is a structured application log entry, and the corresponding list
     *         contains its associated {@link LogsMetadata} entries providing contextual metadata.
     */
    @Override
    public Map<AppLog, List<LogsMetadata>> composeLogsAndMetadata(LogsDataSource dataSource, List<InstantTraceGroup> instantTraceGroups) {
        Map<AppLog, List<LogsMetadata>> result = new HashMap<>();
        for (InstantTraceGroup instantTraceGroup : instantTraceGroups) {
            var appLog = new AppLog(
                    UUID.randomUUID().toString(),
                    instantTraceGroup.timestamp(),
                    extractLogLevel(instantTraceGroup).orElse("UNKNOWN"),
                    dataSource.applicationId(),
                    dataSource.uuid(),
                    instantTraceGroup.chunk()
            );
            var _metadata = Constants.regexTuples.stream()
                    .map(preset -> extractMetadataByRegex(appLog, instantTraceGroup, preset))
                    .filter(Optional::isPresent)
                    .map(Optional::get)
                    .toList();
            result.put(appLog,_metadata);
        }
        return result;
    }
    /**
     * Parses a raw log string and organizes it into a list of {@code InstantTraceGroup} objects.
     * <p>
     * Each {@code InstantTraceGroup} represents a logically grouped set of log lines that belong
     * to the same stack trace or error event. This method handles multi-line stack traces
     * and ensures that related log entries are grouped together for easier processing and analysis.
     *
     * @param rawLogs A single string containing raw log data, potentially spanning multiple lines.
     * @return A list of {@code InstantTraceGroup} objects, each representing a grouped stack trace from the logs.
     */
    @Override
    public List<InstantTraceGroup> composeRawLogsTraceGroup(String rawLogs) {
        if (rawLogs.isEmpty()) return List.of();
        String[] lines = rawLogs.split("\\R");
        List<InstantTraceGroup> instantTraceGroups = new ArrayList<>();
        InstantTraceGroup lastInstant = null;
        for (String line: lines){
            var lineTimestamp = extractTimestamp(line);
            if (lineTimestamp.isPresent()){
                var instant = new InstantTraceGroup(lineTimestamp.get(),line.length(),line);
                lastInstant = instant;
                instantTraceGroups.add(instant);
                continue;
            }
            if (lastInstant == null)
                throw new RuntimeException("Failed to process logs, invalid instant group, missing timestamp");
            var timestamp = lastInstant.timestamp();
            var appendedLine = lastInstant.chunk().concat("\n"+line);
            var instant = new InstantTraceGroup(lastInstant.timestamp(),appendedLine.length(),appendedLine);
            lastInstant = instant;
            var existingInstant = instantTraceGroups.stream().filter(e -> e.timestamp().isEqual(timestamp)).findFirst();
            existingInstant.ifPresent(instantTraceGroups::remove);
            instantTraceGroups.add(instant);
        }
        return instantTraceGroups;
    }
    /**
     * Extracts the timestamp from a single-line log entry and converts it to a {@link LocalDateTime}.
     * <p>
     * The expected timestamp format is {@code dd-MMM-yyyy HH:mm:ss.SSS}, such as:
     * {@code 15-May-2025 14:32:10.213}. If the log line contains a valid timestamp
     * at the beginning, it will be parsed into a {@code LocalDateTime} object.
     * <p>
     * If the timestamp is missing or malformed, an appropriate exception (e.g., {@code DateTimeParseException}
     * or {@code IllegalArgumentException}) may be thrown depending on the implementation.
     *
     * @param singleLineLog A single line from the raw log file, typically starting with a timestamp.
     * @return The extracted {@code LocalDateTime} representing the timestamp in the log entry.
     * @throws DateTimeParseException   if the timestamp format is invalid or cannot be parsed.
     * @throws IllegalArgumentException if the input is null or doesn't contain a recognizable timestamp.
     */
    @Override
    public Optional<LocalDateTime> extractTimestamp(String singleLineLog) throws DateTimeParseException {
        var regex = "\\b\\d{2}-[A-Za-z]{3}-\\d{4} \\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\b";
        var pattern = Pattern.compile(regex);
        var matcher = pattern.matcher(singleLineLog);
        if (matcher.find()) {
            var timestampString = matcher.group();
            return Optional.of(DateTimeUtils.fromTomcatLogTimestamp(timestampString));
        } else {
            var regexL2 = "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z";
            var patternL2 = Pattern.compile(regexL2);
            var matcherL2 = patternL2.matcher(singleLineLog);
            if (!matcherL2.find()) return Optional.empty();
            var timestampString = matcherL2.group();
            return Optional.of(DateTimeUtils.fromTomcatLogTimestamp(timestampString));
        }
    }
    /**
     * Attempts to extract the log level (e.g., INFO, DEBUG, ERROR, WARN) from the provided trace group.
     *
     * <p>This method analyzes the given {@link InstantTraceGroup} to determine the log level associated
     * with the trace. If the log level can be determined, it is returned as a {@link String}; otherwise,
     * an empty {@link Optional} is returned.</p>
     *
     * @param traceGroup the trace group from which to extract the log level
     * @return an {@link Optional} containing the log level if found; otherwise, an empty {@link Optional}
     */
    @Override
    public Optional<String> extractLogLevel(InstantTraceGroup traceGroup) {
        var regex = Constants.logSeverityLevel;
        var pattern = Pattern.compile(regex);
        var matcher = pattern.matcher(traceGroup.chunk());
        if (!matcher.find()) return Optional.empty();
        return Optional.of(matcher.group());
    }
    /**
     * Extracts a single {@link LogsMetadata} object from the provided {@link InstantTraceGroup} using the specified regular expression.
     *
     * <p>This method searches the trace content associated with the given {@link InstantTraceGroup} using the provided regex pattern.
     * If a match is found, a new {@link LogsMetadata} instance is created and returned, linked to the given {@link AppLog}.
     * If no match is found, an empty {@link Optional} is returned.</p>
     *
     * @param appLog the application log to associate with the extracted metadata
     * @param traceGroup the trace group containing the log content to search
     * @param regex the regular expression pattern used to extract the metadata value
     * @return an {@link Optional} containing the extracted {@link LogsMetadata} if a match is found; otherwise, an empty {@link Optional}
     */
    @Override
    public Optional<LogsMetadata> extractMetadataByRegex(AppLog appLog, InstantTraceGroup traceGroup, Constants.Tuple regex) {
        var pattern = Pattern.compile(regex.regex());
        var matcher = pattern.matcher(traceGroup.chunk());
        if (!matcher.find()) return Optional.empty();
        var value = matcher.group();
        var metadata = new LogsMetadata(
                UUID.randomUUID().toString(),
                appLog.uuid(),
                regex.logName(),
                value
        );
        return Optional.of(metadata);
    }
}
